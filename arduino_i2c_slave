#include <Adafruit_TFTLCD.h> 
#include <Adafruit_GFX.h>    
#include <TouchScreen.h>
#include <stdint.h>
#include <Wire.h>
#include "LowPower.h"

#define LCD_CS A3 
#define LCD_CD A2 
#define LCD_WR A1 
#define LCD_RD A0 
#define LCD_RESET A4 

#define TS_MINX 126
#define TS_MINY 136
#define TS_MAXX 929
#define TS_MAXY 901

#define YP A3  // must be an analog pin, use "An" notation!
#define XM A2  // must be an analog pin, use "An" notation!
#define YM 9   // can be a digital pin
#define XP 8   // can be a digital pin

#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF
#define GREY    0xE73C

#define CHAR_OFFSET 12
int Y_DIST_OFFSET;
int DefeaultPosition_SongName;


#define SET_SONGNAME     0x70 // reg
#define SET_STATUS       0x71 // reg
#define STATUS_PLAY      0x50 // data

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 364);

// INTR to SJOne Board
// pause:   0x04 -> 4
// rewind:  0x02 -> 2
// forward: 0x06 -> 6

uint8_t taskcode; 

int setNameCursor;
uint8_t charLocator; 
const int setStatusCursor = 75;

boolean buttonEnabled = true;
boolean rewindEnabled = true;
boolean playEnable = true;
boolean pauseEnable = false;
boolean forwardEnable = true;
boolean resumeEnable = false;
boolean play = true;
boolean resumeSong = false;
boolean volumeChange = true;

/****************** I2C ****************/
#define SLAVE_ADDR 0x10   // Define Slave I2C Address
char ch;
uint8_t reg;


void setup() {
 
  tft.reset();
  uint16_t identifier = tft.readID();
  tft.begin(identifier);
  tft.setRotation(1);
  tft.fillScreen(WHITE); // background
  tft.drawRect(0,0,320,240,RED); //edges
  tft.fillRect(1, 1, 318, 75, GREY); // name box
  
  //Print "Title" 
  tft.setCursor(10,10);
  tft.setTextColor(RED);
  tft.setTextSize(2);
  tft.print("Song:");

  
  // black player background
  tft.fillRect(0, 120, 340, 70, BLACK);

  // <<
  tft.fillRect(40, 100, 71, 60, RED);   
    
  // pause or play  
  tft.fillRect(120, 100, 70, 60, RED);

  // >> 
  tft.fillRect(200, 100, 70, 60, RED);

   
  // Initialize I2C communications as Slave
  Wire.begin(SLAVE_ADDR);
  
  // Function to run when data requested from master
  Wire.onReceive(receiveEvent); 
  Wire.onRequest(requestEvent);

  Serial.begin(9600);
  Serial.println("I2C Slave Demonstration");  

  pinMode(10,INPUT);
  pinMode(12,OUTPUT);
  digitalWrite(12, LOW);
  
  setNameCursor = 75;
}

/****************** STATUS ****************/
void clearName() {
  tft.fillRect(setNameCursor-3, 5, 245, 20, GREY); 
}
void clearStatus() {
  tft.fillRect(setStatusCursor-3, 50, 210, 20, GREY); 
}

// PLAY
void playEnableAction()
{
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    clearName(); clearStatus();           // name name bar
    tft.setCursor(setNameCursor,50);
    tft.setTextColor(BLACK);
    tft.setTextSize(2);
    tft.print("Play");
}

void rewindAction() // <<
{
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    clearName(); clearStatus();            // name name bar
    tft.setCursor(setNameCursor,50);
    tft.setTextColor(BLACK);
    tft.setTextSize(2);
    tft.print("Rewind");
}

void forwardEnableAction() // >>
{
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);  

    clearName(); clearStatus();           // name name bar
    tft.setCursor(setNameCursor,50);   // rewrite
    tft.setTextColor(BLACK);
    tft.setTextSize(2);
    tft.print("Forward");
}

void loop() 
{
  TSPoint p = ts.getPoint();  //Get touch point
  resumeSong = false;

  if (p.z > ts.pressureThreshhold) 
  { 
     p.x = map(p.x, TS_MAXX, TS_MINX, 0, 320);
     p.y = map(p.y, TS_MAXY, TS_MINY, 0, 480); 

     // PLAY
     if((p.x>=136) && (p.x<=215) && (p.y>=200) && (p.y<=300) && (playEnable))// play
     {
        playEnable = false;
        playEnableAction();
        taskcode = 0x04; // pause
        digitalWrite(12,HIGH);// PAUSE INTR
        playEnable = true;
     }

     // <<
     if(p.x>136 && p.x<215 && p.y>60 && p.y<170 && rewindEnabled) 
     {
        rewindEnabled = false; //Disable <<
        rewindAction();
        taskcode = 0x02; // pause
        digitalWrite(12,HIGH);// << INTR
        rewindEnabled = true; // Enable <<
     }    
    // >>
     if((p.x>=136) && (p.x<=215) && (p.y>=330) && (p.y<=435) && (forwardEnable))
     {
        forwardEnable = false; // Disable >>
        forwardEnableAction();
        taskcode = 0x06; // pause
        digitalWrite(12,HIGH);// << INTR
        forwardEnable = true; // Enable >>
     }
  } // END IF
} // END LOOP

void clearGPIO()
{
  digitalWrite(12, LOW);
}

void setName(char ch)
{
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

  tft.setCursor((setNameCursor + charLocator), 10);
  tft.setTextColor(BLUE);
  tft.setTextSize(2);
  tft.print(ch);
  
  charLocator += 13; // offset for next character
}

void receiveEvent(int howMany) 
{
  reg = Wire.read(); 
  Serial.print("op: "); 
  Serial.println(reg);
  
  if (reg == 112) // set song name
  {
    setNameCursor = 75;
    clearName(); // clear previous name
    while (1 < Wire.available()) { 
      char ch = Wire.read();       // receive byte as a character
      Serial.print(ch);            // print the character
      setName(ch);
    }
    int x = Wire.read();          // receive byte as an integer
    Serial.println(x);            // print the integer
    charLocator = 0;              // reset cursor offset
  }

delay(1);
}



void requestEvent() 
{
  int requested = Wire.peek();
  Serial.print("peek: req");

  Wire.write(taskcode); // writes back to task 
  int x = Wire.read();

delay(1);
  clearGPIO(); // necessary 
  taskcode = 0;
}